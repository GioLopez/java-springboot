package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping
    public @ResponseBody
    ResponseEntity getAllUsers(
            @RequestParam(name = "page", required = false, defaultValue = "0") Integer page) {
        // This returns a JSON or XML with the users
        Pageable pagesElement = PageRequest.of(page, 5);
        // It is possible to return the entire JSON that indicate which page
        // you are requesting and how many page it have
        return ResponseEntity.ok().body(userRepository.findAll(pagesElement).getContent());
    }

    @GetMapping(value="/{id}")
    public @ResponseBody ResponseEntity<User> getUser(@PathVariable("id") Long id)
            throws ResourceNotFoundException{
        User foundUser = userRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("User not found for this id :: " + id));
        return ResponseEntity.ok().body(foundUser);
    }

    @PostMapping
    public @ResponseBody User addNewUser (@RequestParam String name
            , @RequestParam String email) {
        User n = new User();
        n.setName(name);
        n.setEmail(email);
        return userRepository.save(n);
    }

    @PutMapping(value="/{id}")
    public @ResponseBody ResponseEntity<User>  modifyUser(@PathVariable(value = "id") long id, @RequestParam String name
            , @RequestParam String email) throws ResourceNotFoundException {
        User n = userRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("User not found for this id :: " + id));

        n.setName(name);
        n.setEmail(email);
        final User updateUser = userRepository.save(n);
        return ResponseEntity.ok(updateUser);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity deleteUser(@PathVariable(value = "id") Long id)
            throws ResourceNotFoundException {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("User not found for this id :: " + id));

        return ResponseEntity.ok().body("Deleted user with id :: " + id);
    }

    @ResponseStatus(value = HttpStatus.NOT_FOUND)
    public class ResourceNotFoundException extends RuntimeException {
        public ResourceNotFoundException() {
            super();
        }
        public ResourceNotFoundException(String message, Throwable cause) {
            super(message, cause);
        }
        public ResourceNotFoundException(String message) {
            super(message);
        }
        public ResourceNotFoundException(Throwable cause) {
            super(cause);
        }
    }

}